const e=(e,t,s=null)=>n('div',e,t,s),t=(e,t,s=null)=>n('h1',e,t,s),s=(e,t,s=null)=>n('img',e,t,s),n=(e,t,s,n=null)=>{let i=document.createElement(e);s&&s.appendChild(i),n&&n.map((e=>{i.appendChild(e)}));for(const e in t)i[e]=t[e];return i};class i{constructor(){this.view=null,this.service=null}show(){}hide(){}delete(){this.view.delete()}}class a extends HTMLElement{constructor(e,t=null){super(),this.parent=e,this.controller=t,this.parent.appendChild(this),this.className='baseView'}delete(){this.parent.removeChild(this)}}customElements.define('base-view',a);class o extends a{constructor(e){super(e),this.renderLoadingView()}renderLoadingView(){this.className='loading-container';const e=s({className:'loading-spinner',src:'../../IMG/brainAsset2.png'}),n=t({className:'loading-title',innerHTML:'Loading...'});this.appendChild(e),this.appendChild(n),gsap.to(e,{opacity:.5,duration:.5,repeat:-1,yoyo:!0})}}customElements.define('loading-view',o);class l{constructor(e){this.controller=e,this.getInitialData()}getInitialData(){let e=window.setTimeout((()=>{window.clearTimeout(e);let t=new CustomEvent('goto-state',{detail:{state:1},bubbles:!0,cancelable:!0,composed:!1});this.controller.view.dispatchEvent(t)}),2e3)}}class c extends i{constructor(e){super(e),this.view=new o(e),this.service=new l(this)}}class r extends a{constructor(e,t,s){super(e),this.className='gameButton',this.innerHTML=t,this.onclick=()=>{gsap.to(this,{scale:1.5,duration:.2,ease:'expo.in',yoyo:!0,repeat:1}),s()}}}customElements.define('game-button',r);class h extends a{constructor(n,i){super(n,i),this.className='HomeView';const a=e({className:'home-menu-container'},this);t({innerHTML:'EMOJI',className:'home-menu-title'},a),s({src:'../../IMG/brainAsset1.png',alt:'Brain Logo',className:'home-menu-logo'},a),t({innerHTML:'MEMORY',className:'home-menu-subtitle1'},a),t({innerHTML:'GAME',className:'home-menu-subtitle2'},a);const o=e({className:'champeon-score-container'},a);t({innerHTML:'CHAMPION',className:'champion-title'},o);const l=e({className:'champion-name-container'},o);t({innerHTML:'Adrian Rojas',className:'champion-name'},l),t({innerHTML:'SCORE: 1000PTS',className:'champion-score'},o);const c=e({className:'mm-button-container'},a);new r(c,'LOGIN',i.navigateToLogin.bind(i)),new r(c,'MENU',i.navigateToMenu.bind(i))}}customElements.define('home-menu-view',h);class d extends i{constructor(e){super(e),this.view=new h(e,this)}navigateToLogin(){let e=new CustomEvent('goto-state',{detail:{state:6},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}navigateToMenu(){let e=new CustomEvent('goto-state',{detail:{state:2},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}}class m extends a{constructor(e,t,s){super(e),this.className='backButton',this.innerHTML=t,this.onclick=()=>{gsap.to(this,{scale:1.5,duration:.2,ease:'expo.in',yoyo:!0,repeat:1}),s()}}}customElements.define('back-button',m);class u extends a{constructor(t,n){super(t,n),this.className='menuView';const i=new m(this,'',(()=>{n.handleBack()}));this.insertBefore(i,this.firstChild);const a=e({className:'menu-container'},this);s({src:'../../IMG/brainAsset1.png',alt:'Brain Logo',className:'menu-logo'},a);const o=e({className:'menu-buttons-container'},a);new r(o,'PLAY',(()=>{this.onMenuButtonClick(3)})),new r(o,'SCORES',(()=>{this.onMenuButtonClick(7)})),new r(o,'LEVEL',(()=>{this.onMenuButtonClick(5)})),new r(o,'THEMES',(()=>{this.onMenuButtonClick(8)})),new r(o,'CREDITS',(()=>{this.onMenuButtonClick(4)}))}onMenuButtonClick(e){const t=new CustomEvent('goto-state',{detail:{state:e},bubbles:!0,cancelable:!0,composed:!1});this.dispatchEvent(t)}}customElements.define('menu-view',u);class p extends i{constructor(e){super(e),this.view=new u(e,this)}handleBack(){let e=new CustomEvent('goto-state',{detail:{state:1},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}handlePlay(){let e=new CustomEvent('goto-state',{detail:{state:3},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}handleScores(){let e=new CustomEvent('goto-state',{detail:{state:7},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}handleDifficulty(){let e=new CustomEvent('goto-state',{detail:{state:5},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}handleThemes(){let e=new CustomEvent('goto-state',{detail:{state:8},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}handleCredits(){let e=new CustomEvent('goto-state',{detail:{state:4},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}}class w extends a{constructor(e,t,s=null){super(e),this.card=t,this.className='cardView',this.innerHTML=t.emoji,this.onclick=()=>{null!==s&&(this.card.isSelected=!0,s(this.card))},window.addEventListener('show-card',(e=>{this.card.isSelected&&this.show()}))}show(){gsap.to(this,{scale:1.1,duration:.15,ease:'expo.in',yoyo:!0,repeat:1}),this.innerHTML=this.card.emoji}hide(){this.card.isSelected=!1,this.innerHTML=''}reset(){this.card.isDiscovered?this.classList.add('cardView-discovered'):this.hide()}}customElements.define('card-view',w);class b extends a{constructor(t,s){super(t,s),this.className='playView',this.cardsContainer=e({className:'playView-cardsContainer'},this),this.cardViews=[]}showCards(e){e.forEach(((e,t)=>{e.id=t,this.cardViews.push(new w(this.cardsContainer,e,this.onCardSelected.bind(this)))}))}onCardSelected(e){this.controller.onCardSelection(e)}resetCards(){this.cardViews.forEach((e=>{e.reset()}))}}customElements.define('play-view',b);class C{constructor(e){this.controller=e,this.getData()}getData(){fetch('http://localhost:4000').then((e=>{e.json().then((e=>{this.controller.show(e.cards)})).catch((e=>{console.log(e)}))})).catch((e=>{console.log(e)}))}}class v extends i{constructor(e){super(e),this.view=new b(e,this),this.service=new C(this),this.cards=null,this.showingCardsTimer=null,this.gamePlayTimer=null,this.gamePlayTime=0,this.clicks=0,this.card1=null,this.card2=null}show(e){this.cards=e,this.view.showCards(this.cards),this.gamePlayTimer=window.setInterval((()=>{this.gamePlayTime=1,this.triggerShowCardEvent()}),1e3)}onCardSelection(){null===this.showingCardsTimer&&(null!==this.card1&&null!==this.card2||null!==this.card1&&this.card1.id===cardSelected.id||(null===this.card1?(this.card1=cardSelected,this.triggerShowCardEvent()):null===this.card2&&(this.card2=cardSelected,this.triggerShowCardEvent()),null!==this.card1&&null!==this.card2&&(this.showingCardsTimer=window.setTimeout((()=>{this.card1.emojiId===this.card2.emojiId&&(this.card1.isSelected=!1,this.card2.isSelected=!1,this.card1.isDisconvered=!0,this.card2.isDisconvered=!0),this.card1=null,this.card2=null,this.showingCardsTimer=null,this.view.resetCards(),this.isGameComplete()&&(this.stopAndClearGameTimer(),console.log('GAME COMPLETE'))}),1500))))}triggerShowCardEvent(){let e=new CustomEvent('show-card',{detail:{state:''},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e),this.triggerClickEvent()}isGameComplete(){for(let e=0;e<this.cards.length;e++){if(!this.cards[e].isDisconvered)return!1}return!0}triggerPlayGameTimeEvent(){let e=new CustomEvent('udpate-play-game-time',{detail:{time:this.gamePlayTime},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}triggerClickEvent(){this.clicks+=1;let e=new CustomEvent('udpate-clicks',{detail:{clicks:this.clicks},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}delete(){super.delete(),this.stopAndClearGameTimer()}stopAndClearGameTimer(){window.clearInterval(this.gamePlayTimer),this.gamePlayTimer=null}}class g extends a{constructor(n,i){super(n,i),this.className='creditsView';const a=new m(this,'',(()=>{i.handleBack()}));this.insertBefore(a,this.firstChild);const o=e({className:'credits-container'},this);t({innerHTML:'EMOJI',className:'home-menu-title'},o),s({src:'../../IMG/brainAsset1.png',alt:'Brain Logo',className:'home-menu-logo'},o),t({innerHTML:'MEMORY',className:'home-menu-subtitle1'},o),t({innerHTML:'GAME',className:'home-menu-subtitle2'},o),t({innerHTML:'UNIVERSIDAD CENFOTEC',className:'home-menu-subtitle1 universidad-title'},o),t({innerHTML:'DIWEB-09',className:'home-menu-subtitle1'},o),t({innerHTML:'AdriÃ¡n Rojas',className:'home-menu-subtitle1'},o)}}customElements.define('credits-view',g);class E extends i{constructor(e){super(e),this.view=new g(e,this)}handleBack(){let e=new CustomEvent('goto-state',{detail:{state:2},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}}class T extends a{constructor(t,n){super(t,n),this.className='levelView';const i=new m(this,'',(()=>{n.handleBack()}));this.insertBefore(i,this.firstChild);const a=e({className:'level-container'},this);s({src:'../../IMG/brainAsset1.png',alt:'Brain Logo',className:'menu-logo'},a);const o=e({className:'menu-buttons-container'},a);new r(o,'LOW',(()=>{console.log(4)})),new r(o,'MEDIUM',(()=>{console.log(6)})),new r(o,'HIGH',(()=>{console.log(8)}))}}class L extends i{constructor(e){super(e),this.view=new T(e,this)}handleBack(){let e=new CustomEvent('goto-state',{detail:{state:2},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}}class M{constructor(){this.mainContainer=e({className:'mainContainer'},document.body),this.contentContainer=e({className:'contentContainer'},this.mainContainer),this.currentController=null,this.backBtn=e({className:'.navbarContainer-backBtn'},this.navbarContainer),s({className:'.navbarContainer-backArrow'},this.backBtn),this.appTitle=((e,t,s=null)=>n('span',e,t,s))({className:'navbarContainer-title',innerHTML:'NAVBAR'},this.navbarContainer),this.mainContainer.addEventListener('loading-completed',(e=>{this.loadingCompleted()})),this.mainContainer.addEventListener('update-play-game-time',(e=>{this.timeLbl.innerHTML=e.detail.time})),this.mainContainer.addEventListener('update-clicks',(e=>{this.clicksLbl.innerHTML=e.detail.clicks})),this.mainContainer.addEventListener('goto-state',(e=>{this.goto(e.detail.state)})),this.currentController=new c(this.contentContainer)}goto(e){switch(null!==this.currentController&&(this.currentController.delete(),this.currentController=null),2===e||6===e||7===e||5===e||8===e||4===e?this.backBtn.classList.remove('hidden'):this.backBtn.classList.add('hidden'),e){case 1:this.appTitle.innerHTML='HOME',this.currentController=new d(this.contentContainer);break;case 2:this.appTitle.innerHTML='MENU',this.currentController=new p(this.contentContainer);break;case 6:this.appTitle.innerHTML='LOGIN';break;case 7:this.appTitle.innerHTML='SCORES';break;case 4:this.appTitle.innerHTML='CREDITS',this.currentController=new E(this.contentContainer);break;case 8:this.appTitle.innerHTML='THEMES';break;case 5:this.appTitle.innerHTML='DIFFICULTY',this.currentController=new L(this.contentContainer);break;case RESULTS_STATE:this.appTitle.innerHTML='RESULTS';break;case PLAY_STATE:this.appTitle.innerHTML='PLAY',this.currentController=new v(this.contentContainer);break;default:this.currentController=new c(this.contentContainer)}}loadingCompleted(){this.currentController.delete()}onBackBtn(){6===state||7===state||5===state||8===state||4===state?this.goto(2):this.goto(1)}onResetBtn(){this.timeLbl.innerHTML=0,this.clicksLbl.innerHTML=0,this.goto(PLAY_STATE)}}window.onload=function(){new M};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
