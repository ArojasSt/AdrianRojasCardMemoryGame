const e=(e,t,s=null)=>i('div',e,t,s),t=(e,t,s=null)=>i('h1',e,t,s),s=(e,t,s=null)=>i('img',e,t,s),n=(e,t,s=null)=>i('span',e,t,s),i=(e,t,s,n=null)=>{let i=document.createElement(e);s&&s.appendChild(i),n&&n.map((e=>{i.appendChild(e)}));for(const e in t)i[e]=t[e];return i};class a{constructor(){this.view=null,this.service=null}show(){}hide(){}delete(){this.view.delete()}}class o extends HTMLElement{constructor(e,t=null){super(),this.parent=e,this.controller=t,this.parent.appendChild(this),this.className='baseView'}delete(){this.parent.removeChild(this)}}customElements.define('base-view',o);class l extends o{constructor(e){super(e),this.renderLoadingView()}renderLoadingView(){this.className='loading-container';const e=s({className:'loading-spinner',src:'../../IMG/brainAsset2.png'}),n=t({className:'loading-title',innerHTML:'Loading...'});this.appendChild(e),this.appendChild(n),gsap.to(e,{opacity:.5,duration:.5,repeat:-1,yoyo:!0})}}customElements.define('loading-view',l);class c{constructor(e){this.controller=e,this.getInitialData()}getInitialData(){let e=window.setTimeout((()=>{window.clearTimeout(e);let t=new CustomEvent('goto-state',{detail:{state:1},bubbles:!0,cancelable:!0,composed:!1});this.controller.view.dispatchEvent(t)}),500)}}class r extends a{constructor(e){super(e),this.view=new l(e),this.service=new c(this)}}class h extends o{constructor(e,t,s){super(e),this.className='gameButton',this.innerHTML=t,this.onclick=()=>{gsap.to(this,{scale:1.5,duration:.2,ease:'expo.in',yoyo:!0,repeat:1}),s()}}}customElements.define('game-button',h);class d extends o{constructor(n,i){super(n,i),this.className='HomeView';const a=e({className:'home-menu-container'},this);t({innerHTML:'EMOJI',className:'home-menu-title'},a),s({src:'../../IMG/brainAsset1.png',alt:'Brain Logo',className:'home-menu-logo'},a),t({innerHTML:'MEMORY',className:'home-menu-subtitle1'},a),t({innerHTML:'GAME',className:'home-menu-subtitle2'},a);const o=e({className:'champeon-score-container'},a);t({innerHTML:'CHAMPION',className:'champion-title'},o);const l=e({className:'champion-name-container'},o);t({innerHTML:'Adrian Rojas',className:'champion-name'},l),t({innerHTML:'SCORE: 1000PTS',className:'champion-score'},o);const c=e({className:'mm-button-container'},a);new h(c,'LOGIN',i.navigateToLogin.bind(i)),new h(c,'MENU',i.navigateToMenu.bind(i))}}customElements.define('home-menu-view',d);class m extends a{constructor(e){super(e),this.view=new d(e,this)}navigateToLogin(){let e=new CustomEvent('goto-state',{detail:{state:6},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}navigateToMenu(){let e=new CustomEvent('goto-state',{detail:{state:2},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}}class u extends o{constructor(e,t,s){super(e),this.className='backButton',this.innerHTML=t,this.onclick=()=>{gsap.to(this,{scale:1.5,duration:.2,ease:'expo.in',yoyo:!0,repeat:1}),s()}}}customElements.define('back-button',u);class p extends o{constructor(t,n){super(t,n),this.className='menuView';const i=new u(this,'',(()=>{n.handleBack()}));this.insertBefore(i,this.firstChild);const a=e({className:'menu-container'},this);s({src:'../../IMG/brainAsset1.png',alt:'Brain Logo',className:'menu-logo'},a);const o=e({className:'menu-buttons-container'},a);new h(o,'PLAY',(()=>{this.onMenuButtonClick(3)})),new h(o,'SCORES',(()=>{this.onMenuButtonClick(7)})),new h(o,'LEVEL',(()=>{this.onMenuButtonClick(5)})),new h(o,'THEMES',(()=>{this.onMenuButtonClick(8)})),new h(o,'CREDITS',(()=>{this.onMenuButtonClick(4)}))}onMenuButtonClick(e){const t=new CustomEvent('goto-state',{detail:{state:e},bubbles:!0,cancelable:!0,composed:!1});this.dispatchEvent(t)}}customElements.define('menu-view',p);class w extends a{constructor(e){super(e),this.view=new p(e,this)}handleBack(){let e=new CustomEvent('goto-state',{detail:{state:1},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}handlePlay(){let e=new CustomEvent('goto-state',{detail:{state:3},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}handleScores(){let e=new CustomEvent('goto-state',{detail:{state:7},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}handleDifficulty(){let e=new CustomEvent('goto-state',{detail:{state:5},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}handleThemes(){let e=new CustomEvent('goto-state',{detail:{state:8},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}handleCredits(){let e=new CustomEvent('goto-state',{detail:{state:4},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}}class b extends o{constructor(e,t,n=null){super(e),this.card=t,this.className='cardView',this.innerHTML=t.emoji,this.onclick=()=>{null!==n&&(this.card.isSelected=!0,n(this.card))},window.addEventListener('show-card',(e=>{this.card.isSelected&&this.show()})),this.image=s({src:`../../${this.card.emoji}.png`},this)}show(){gsap.to(this,{rotationY:180,duration:1,ease:'expo.in',onComplete:()=>{this.card.isImage?this.image.classList.remove('hidden'):this.innerHTML=this.card.emoji}})}hide(){this.card.isSelected=!1,gsap.to(this,{rotationY:0,duration:1,ease:'expo.in',onComplete:()=>{this.card.isImage?this.image.classList.remove('hidden'):this.innerHTML=this.card.emoji}})}reset(){this.card.isDiscovered?(gsap.to(this.image,{duration:.1,ease:'bounce.out',scale:1.1,yoyo:!0,repeat:5}),this.classList.add('cardView-discovered')):this.hide()}}customElements.define('card-view',b);class g extends o{constructor(t,s){super(t,s),this.className='playView';const n=new u(this,'',(()=>{s.handleBack()}));this.insertBefore(n,this.firstChild),this.cardsContainer=e({className:'playView-cardsContainer'},this),this.cardViews=[]}showCards(e){e.forEach(((e,t)=>{e.id=t,this.cardViews.push(new b(this.cardsContainer,e,this.onCardSelected.bind(this)))}))}onCardSelected(e){this.controller.onCardSelection(e)}resetCards(){this.cardViews.forEach((e=>{e.reset()}))}}customElements.define('play-view',g);class v{constructor(e){this.controller=e,this.getData()}getData(){fetch('http://localhost:4000/cards/4/faces').then((e=>{e.json().then((e=>{this.controller.show(e.cards)})).catch((e=>{console.log(e)}))})).catch((e=>{console.log(e)}))}}class C extends a{constructor(e){super(e),this.view=new g(e,this),this.service=new v(this),this.cards=null,this.showingCardsTimer=null,this.gamePlayTimer=null,this.gamePlayTime=0,this.clicks=0,this.card1=null,this.card2=null}show(e){this.cards=e,this.view.showCards(this.cards),this.gamePlayTimer=window.setInterval((()=>{this.gamePlayTime=1,this.triggerShowCardEvent()}),1e3)}onCardSelection(){null===this.showingCardsTimer&&(null!==this.card1&&null!==this.card2||null!==this.card1&&this.card1.id===cardSelected.id||(null===this.card1?(this.card1=cardSelected,this.triggerShowCardEvent()):null===this.card2&&(this.card2=cardSelected,this.triggerShowCardEvent()),null!==this.card1&&null!==this.card2&&(this.showingCardsTimer=window.setTimeout((()=>{this.card1.emojiId===this.card2.emojiId&&(this.card1.isSelected=!1,this.card2.isSelected=!1,this.card1.isDisconvered=!0,this.card2.isDisconvered=!0),this.card1=null,this.card2=null,this.showingCardsTimer=null,this.view.resetCards(),this.isGameComplete()&&(this.stopAndClearGameTimer(),console.log('GAME COMPLETE'))}),1500))))}triggerShowCardEvent(){let e=new CustomEvent('show-card',{detail:{state:''},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e),this.triggerClickEvent()}isGameComplete(){for(let e=0;e<this.cards.length;e++){if(!this.cards[e].isDisconvered)return!1}return!0}triggerPlayGameTimeEvent(){let e=new CustomEvent('udpate-play-game-time',{detail:{time:this.gamePlayTime},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}triggerClickEvent(){this.clicks+=1;let e=new CustomEvent('udpate-clicks',{detail:{clicks:this.clicks},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}delete(){super.delete(),this.stopAndClearGameTimer()}stopAndClearGameTimer(){window.clearInterval(this.gamePlayTimer),this.gamePlayTimer=null}handleBack(){let e=new CustomEvent('goto-state',{detail:{state:2},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}}class E extends o{constructor(n,i){super(n,i),this.className='creditsView';const a=new u(this,'',(()=>{i.handleBack()}));this.insertBefore(a,this.firstChild);const o=e({className:'credits-container'},this);t({innerHTML:'EMOJI',className:'home-menu-title'},o),s({src:'../../IMG/brainAsset1.png',alt:'Brain Logo',className:'home-menu-logo'},o),t({innerHTML:'MEMORY',className:'home-menu-subtitle1'},o),t({innerHTML:'GAME',className:'home-menu-subtitle2'},o),t({innerHTML:'UNIVERSIDAD CENFOTEC',className:'home-menu-subtitle1 universidad-title'},o),t({innerHTML:'DIWEB-09',className:'home-menu-subtitle1'},o),t({innerHTML:'AdriÃ¡n Rojas',className:'home-menu-subtitle1'},o)}}customElements.define('credits-view',E);class T extends a{constructor(e){super(e),this.view=new E(e,this)}handleBack(){let e=new CustomEvent('goto-state',{detail:{state:2},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}}class M extends o{constructor(t,n){super(t,n),this.className='levelView';const i=new u(this,'',(()=>{n.handleBack()}));this.insertBefore(i,this.firstChild);const a=e({className:'level-container'},this);s({src:'../../IMG/brainAsset1.png',alt:'Brain Logo',className:'menu-logo'},a);const o=e({className:'menu-buttons-container'},a);new h(o,'LOW',(()=>{console.log(4)})),new h(o,'MEDIUM',(()=>{console.log(6)})),new h(o,'HIGH',(()=>{console.log(8)}))}}customElements.define('level-view',M);class L extends a{constructor(e){super(e),this.view=new M(e,this)}handleBack(){let e=new CustomEvent('goto-state',{detail:{state:2},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(e)}}class N extends o{constructor(t,a){super(t,a),this.className='loginView';const o=e({className:'login-menu-container'},this);h1({innerHTML:'EMOJI',className:'home-menu-title'},o),s({src:'../../IMG/brainAsset1.png',alt:'Brain Logo',className:'home-menu-logo'},o),h1({innerHTML:'MEMORY',className:'home-menu-subtitle1'},o),h1({innerHTML:'GAME',className:'home-menu-subtitle2'},o),n({className:'loginView-title',innerHTML:'Input Your User Name'}),this.userNameIn=((e,t,s=null)=>i('input',e,t,s))({className:'loginView-userNameIn'},this),new h(this,'SAVE',(()=>{this.onGameButtonClick()})).classList.add('gameButton')}onGameButtonClick(){let e=this.userNameIn.value;if(''!==e){this.controller.saveUserName(e);let t=new CustomEvent('goto-state',{detail:{state:2},bubbles:!0,cancelable:!0,composed:!1});this.view.dispatchEvent(t)}else alert('Please add a username!')}}customElements.define('login-view',N);class k extends a{constructor(e){super(e),this.view=new N(e,this)}saveUserName(e){localStorage.setItem('username',e)}}class H{constructor(){this.mainContainer=e({className:'mainContainer'},document.body),this.contentContainer=e({className:'contentContainer'},this.mainContainer),this.currentController=null,this.backBtn=e({className:'.navbarContainer-backBtn'},this.navbarContainer),s({className:'.navbarContainer-backArrow'},this.backBtn),this.appTitle=n({className:'navbarContainer-title',innerHTML:'NAVBAR'},this.navbarContainer),this.mainContainer.addEventListener('loading-completed',(e=>{this.loadingCompleted()})),this.mainContainer.addEventListener('update-play-game-time',(e=>{this.timeLbl.innerHTML=e.detail.time})),this.mainContainer.addEventListener('update-clicks',(e=>{this.clicksLbl.innerHTML=e.detail.clicks})),this.mainContainer.addEventListener('goto-state',(e=>{this.goto(e.detail.state)})),this.goto(3)}goto(e){switch(null!==this.currentController&&(this.currentController.delete(),this.currentController=null),2===e||6===e||7===e||5===e||8===e||3===e||4===e?this.backBtn.classList.remove('hidden'):this.backBtn.classList.add('hidden'),e){case 0:default:this.currentController=new r(this.contentContainer);break;case 1:this.appTitle.innerHTML='HOME',this.currentController=new m(this.contentContainer);break;case 2:this.appTitle.innerHTML='MENU',this.currentController=new w(this.contentContainer);break;case 6:this.appTitle.innerHTML='LOGIN',this.currentController=new k(this.contentContainer);break;case 7:this.appTitle.innerHTML='SCORES';break;case 4:this.appTitle.innerHTML='CREDITS',this.currentController=new T(this.contentContainer);break;case 8:this.appTitle.innerHTML='THEMES';break;case 5:this.appTitle.innerHTML='DIFFICULTY',this.currentController=new L(this.contentContainer);break;case 9:this.appTitle.innerHTML='RESULTS';break;case 3:this.appTitle.innerHTML='PLAY',this.currentController=new C(this.contentContainer)}}loadingCompleted(){this.currentController.delete()}onBackBtn(){6===state||7===state||5===state||8===state||4===state?this.goto(2):this.goto(1)}onResetBtn(){this.timeLbl.innerHTML=0,this.clicksLbl.innerHTML=0,this.goto(3)}}window.onload=function(){new H};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
